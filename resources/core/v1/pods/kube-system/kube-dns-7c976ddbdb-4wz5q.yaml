apiVersion: v1
kind: Pod
metadata:
  annotations:
    components.gke.io/component-name: kubedns
    components.gke.io/component-version: 1.0.3
    scheduler.alpha.kubernetes.io/critical-pod: ""
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  creationTimestamp: "2020-11-07T03:04:14Z"
  generateName: kube-dns-7c976ddbdb-
  labels:
    k8s-app: kube-dns
    pod-template-hash: 7c976ddbdb
  name: kube-dns-7c976ddbdb-4wz5q
  namespace: kube-system
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: kube-dns-7c976ddbdb
    uid: 00baaf29-9a79-4fc4-bffd-0128db957656
  resourceVersion: "22539206"
  selfLink: /api/v1/namespaces/kube-system/pods/kube-dns-7c976ddbdb-4wz5q
  uid: b2d2a3e9-fcd1-4ae7-b997-d03b97796bcb
spec:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: k8s-app
              operator: In
              values:
              - kube-dns
          topologyKey: kubernetes.io/hostname
        weight: 100
  containers:
  - args:
    - --domain=cluster.local.
    - --dns-port=10053
    - --config-dir=/kube-dns-config
    - --v=2
    env:
    - name: PROMETHEUS_PORT
      value: "10055"
    image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.13
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthcheck/kubedns
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: kubedns
    ports:
    - containerPort: 10053
      name: dns-local
      protocol: UDP
    - containerPort: 10053
      name: dns-tcp-local
      protocol: TCP
    - containerPort: 10055
      name: metrics
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /readiness
        port: 8081
        scheme: HTTP
      initialDelaySeconds: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits:
        memory: 210Mi
      requests:
        cpu: 100m
        memory: 70Mi
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsUser: 1001
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /kube-dns-config
      name: kube-dns-config
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-gvk7l
      readOnly: true
  - args:
    - -v=2
    - -logtostderr
    - -configDir=/etc/k8s/dns/dnsmasq-nanny
    - -restartDnsmasq=true
    - --
    - -k
    - --cache-size=1000
    - --no-negcache
    - --dns-forward-max=1500
    - --log-facility=-
    - --server=/cluster.local/127.0.0.1#10053
    - --server=/in-addr.arpa/127.0.0.1#10053
    - --server=/ip6.arpa/127.0.0.1#10053
    image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.13
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthcheck/dnsmasq
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: dnsmasq
    ports:
    - containerPort: 53
      name: dns
      protocol: UDP
    - containerPort: 53
      name: dns-tcp
      protocol: TCP
    resources:
      requests:
        cpu: 150m
        memory: 20Mi
    securityContext:
      capabilities:
        add:
        - NET_BIND_SERVICE
        - SETGID
        drop:
        - all
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /etc/k8s/dns/dnsmasq-nanny
      name: kube-dns-config
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-gvk7l
      readOnly: true
  - args:
    - --v=2
    - --logtostderr
    - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
    - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
    image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.13
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /metrics
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: sidecar
    ports:
    - containerPort: 10054
      name: metrics
      protocol: TCP
    resources:
      requests:
        cpu: 10m
        memory: 20Mi
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsUser: 1001
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-gvk7l
      readOnly: true
  - command:
    - /monitor
    - --source=kubedns:http://localhost:10054?whitelisted=probe_kubedns_latency_ms,probe_kubedns_errors,dnsmasq_misses,dnsmasq_hits
    - --stackdriver-prefix=container.googleapis.com/internal/addons
    - --api-override=https://monitoring.googleapis.com/
    - --pod-id=$(POD_NAME)
    - --namespace-id=$(POD_NAMESPACE)
    - --v=2
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    image: gke.gcr.io/prometheus-to-sd:v0.4.2
    imagePullPolicy: IfNotPresent
    name: prometheus-to-sd
    resources: {}
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsUser: 1001
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-dns-token-gvk7l
      readOnly: true
  dnsPolicy: Default
  enableServiceLinks: true
  nodeName: gke-jstrachan-tekton-default-pool-154aeb80-ccfi
  nodeSelector:
    beta.kubernetes.io/os: linux
  priority: 2000000000
  priorityClassName: system-cluster-critical
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    fsGroup: 65534
    supplementalGroups:
    - 65534
  serviceAccount: kube-dns
  serviceAccountName: kube-dns
  terminationGracePeriodSeconds: 30
  tolerations:
  - key: CriticalAddonsOnly
    operator: Exists
  - key: components.gke.io/gke-managed-components
    operator: Exists
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - configMap:
      defaultMode: 420
      name: kube-dns
      optional: true
    name: kube-dns-config
  - name: kube-dns-token-gvk7l
    secret:
      defaultMode: 420
      secretName: kube-dns-token-gvk7l
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-11-07T03:04:14Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-11-07T03:05:18Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-11-07T03:05:18Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-11-07T03:04:14Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://395708c4b67e240f7636e0c9b3602c0cf3a3637d3c7b55b8e24911391b55f94a
    image: gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.15.13
    imageID: docker-pullable://gke.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:1eba77c751b7b25c9af97c23c857f3a7024253224d256b8648b0d86cddda5074
    lastState: {}
    name: dnsmasq
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-11-07T03:05:09Z"
  - containerID: docker://0a548067887200fbffd74541bf93592ad1fcac4555415d524b950184e5d4f7fa
    image: gke.gcr.io/k8s-dns-kube-dns-amd64:1.15.13
    imageID: docker-pullable://gke.gcr.io/k8s-dns-kube-dns-amd64@sha256:aa806fb62da0318362fe5a8b110187cfc99f41c6c14261855fa10e1680f60d5b
    lastState: {}
    name: kubedns
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-11-07T03:05:02Z"
  - containerID: docker://d2f2020b0b28d23e618c0a220fc5647c1f5bda30b03c50db2fa8af8e93ecc476
    image: gke.gcr.io/prometheus-to-sd:v0.4.2
    imageID: docker-pullable://gke.gcr.io/prometheus-to-sd@sha256:aca8ef83a7fae83f1f8583e978dd4d1ff655b9f2ca0a76bda5edce6d8965bdf2
    lastState: {}
    name: prometheus-to-sd
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-11-07T03:05:13Z"
  - containerID: docker://c6d26e4fc885e57057153f32bc8c8fe8749061d2e74845864c0b7e9518b42fb0
    image: gke.gcr.io/k8s-dns-sidecar-amd64:1.15.13
    imageID: docker-pullable://gke.gcr.io/k8s-dns-sidecar-amd64@sha256:2c935daf0ee19f45d04c44a19a82bfd21c3d960fe286df970dce491fd8e8b0b5
    lastState: {}
    name: sidecar
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-11-07T03:05:11Z"
  hostIP: 10.128.0.2
  phase: Running
  podIP: 10.8.3.4
  podIPs:
  - ip: 10.8.3.4
  qosClass: Burstable
  startTime: "2020-11-07T03:04:14Z"
